# main.yml
name: Build and Release operator
run-name: ${{ github.actor }} triggerd -> ${{ github.event_name }} ${{ github.event.head_commit.message }}${{ github.event.pull_request.title }}

on:
  push:
    branches:
      - dev
      - feature/**
      - hotfix/**
      - fix/**
      - issue/**
    paths-ignore:
      - README.md
      - CHANGELOG.md # Should never be edited anyway
      - .gitignore
      - .github/**
  pull_request_target:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:

env:
  IMAGE_REGISTRY: ghcr.io
  OPERATOR_SDK_VERSION: v1.29.0

jobs:
  prepare:
    if: ${{ github.event_name == 'push' || github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG_BASE: ${{ steps.SET_IMAGE_TAG_BASE.outputs.IMAGE_TAG_BASE }}
      OPERATOR_VERSION: ${{ steps.SET_OPERATOR_VERSION.outputs.OPERATOR_VERSION }}
      OPERATOR_VERSION_STRICT: ${{ steps.SET_OPERATOR_VERSION.outputs.OPERATOR_VERSION_STRICT }}
      IS_RELEASE: ${{ steps.SET_OPERATOR_VERSION.outputs.IS_RELEASE }}
      CURRENT: ${{ steps.semver.outputs.current }}
      NEXT: ${{ steps.semver.outputs.next }}
      NEXT_STRICT: ${{ steps.semver.outputs.nextStrict }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Export Repo Name lowercase
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      - name: Set IMAGE_TAG_BASE
        id: SET_IMAGE_TAG_BASE
        run: echo "IMAGE_TAG_BASE=${{ env.IMAGE_REGISTRY }}/${{ env.REPO }}" >>${GITHUB_OUTPUT}

      - name: Get Next Version
        id: semver
        if: github.ref_name == 'main'
        continue-on-error: false
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: main

      - name: Set OPERATOR_VERSION
        id: SET_OPERATOR_VERSION
        uses: actions/github-script@v6
        env:
          NEXT: ${{ steps.semver.outputs.next }}
          NEXT_STRICT: ${{ steps.semver.outputs.nextStrict }}
        with:
          result-encoding: string
          script: |
            const {GITHUB_REF_NAME,GITHUB_HEAD_REF,NEXT,NEXT_STRICT} = process.env
            let OPERATOR_VERSION = GITHUB_REF_NAME
            let OPERATOR_VERSION_STRICT = GITHUB_REF_NAME

            // if run is triggerd by a pull request use GITHUB_HEAD_REF
            if (GITHUB_HEAD_REF) {
              OPERATOR_VERSION = GITHUB_HEAD_REF
            }

            // remove any non alphanumeric characters
            OPERATOR_VERSION = OPERATOR_VERSION.replace(/[^a-zA-Z0-9]/g, '-')
  
            // if run is triggerd on main use the next tag
            if (NEXT_STRICT && NEXT) {
              OPERATOR_VERSION = NEXT
              OPERATOR_VERSION_STRICT = NEXT_STRICT
              core.setOutput('IS_RELEASE', true)
            }

            core.setOutput('OPERATOR_VERSION', OPERATOR_VERSION)
            core.setOutput('OPERATOR_VERSION_STRICT', OPERATOR_VERSION_STRICT)

  buildah:
    needs: prepare
    if: ${{ github.event_name == 'push' || github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
    env:
      IMAGE_TAG_BASE: ${{ needs.prepare.outputs.IMAGE_TAG_BASE }}
      OPERATOR_VERSION: ${{ needs.prepare.outputs.OPERATOR_VERSION }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:hack"
          platforms: linux/amd64,linux/arm64
          file: "Dockerfile.buildah.k8s.rootless"
          push: true
          tags: ${{ env.IMAGE_TAG_BASE }}-buildah:${{ env.OPERATOR_VERSION }}

  operator:
    needs: prepare
    if: ${{ github.event_name == 'push' || github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
    env:
      OPERATOR_VERSION: ${{ needs.prepare.outputs.OPERATOR_VERSION }}
      OPERATOR_VERSION_STRICT: ${{ needs.prepare.outputs.OPERATOR_VERSION_STRICT }}
      VERSION: ${{ needs.prepare.outputs.OPERATOR_VERSION_STRICT }} //needed for make file
      IMAGE_TAG_BASE: ${{ needs.prepare.outputs.IMAGE_TAG_BASE }}
      IMG: "${{ needs.prepare.outputs.IMAGE_TAG_BASE }}:${{ needs.prepare.outputs.OPERATOR_VERSION }}"
      BUNDLE_IMG: "${{ needs.prepare.outputs.IMAGE_TAG_BASE }}-bundle:${{ needs.prepare.outputs.OPERATOR_VERSION }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Install the operator-sdk CLI
      - name: Install operator-sdk
        uses: ./.github/actions/install_operator_sdk
        with:
          OPERATOR_SDK_VERSION: ${{ env.OPERATOR_SDK_VERSION }}

      # Build the bundle image
      - name: Build bundle
        shell: bash
        env:
          DOCKER_BUILDKIT: "1" # Enable Docker Buildkit
          PLATFORMS: linux/amd64,linux/arm64
        run: |
          echo "Building bundle"
          make docker-buildx
          make bundle bundle-buildx

  release:
    needs: [prepare, buildah, operator]
    runs-on: ubuntu-latest
    env:
      OPERATOR_VERSION: ${{ needs.prepare.outputs.OPERATOR_VERSION }}
      OPERATOR_VERSION_STRICT: ${{ needs.prepare.outputs.OPERATOR_VERSION_STRICT }}
      CURRENT: ${{ needs.prepare.outputs.CURRENT }}
      NEXT: ${{ needs.prepare.outputs.NEXT }}
      NEXT_STRICT: ${{ needs.prepare.outputs.NEXT_STRICT }}
    if: github.ref_name == 'main' && needs.prepare.outputs.IS_RELEASE == 'true'
    permissions:
      contents: write
    steps:
      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1.8.0
        with:
          token: ${{ github.token }}
          fromTag: ${{ github.ref_name }}
          toTag: ${{ env.CURRENT }}
      # Create a new release on GitHub with the semantic OPERATOR_VERSION number
      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          draft: true
          makeLatest: true
          name: "Release: ${{ env.OPERATOR_VERSION }}"
          body: |
            # Install or upgrade new operator version

            ```shell
            operator-sdk run bundle ghcr.io/austriandatalab/execdat-operator-bundle:${{ env.OPERATOR_VERSION }}
            operator-sdk run bundle-upgrade ghcr.io/austriandatalab/execdat-operator-bundle:${{ env.OPERATOR_VERSION }}
            ```

            # Pull new images
            
            ```shell
            docker pull ghcr.io/austriandatalab/execdat-operator-bundle:${{ env.OPERATOR_VERSION }}
            docker pull ghcr.io/austriandatalab/execdat-operator-buildah:${{ env.OPERATOR_VERSION }}
            docker pull ghcr.io/austriandatalab/execdat-operator:${{ env.OPERATOR_VERSION }}
            ```

            # Changelog
            ${{ steps.changelog.outputs.changes }}
          token: ${{ github.token }}
          commit: ${{ github.sha }}
          tag: ${{ env.OPERATOR_VERSION }}
          generateReleaseNotes: true

      - name: Commit CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: 'docs: update CHANGELOG.md for ${{ github.ref_name }} [skip ci]'
          file_pattern: CHANGELOG.md
