// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1alpha1

import (
	"errors"
	"fmt"
)

const (
	// CurrentPhasePending is a CurrentPhase of type pending.
	CurrentPhasePending CurrentPhase = "pending"
	// CurrentPhaseBuilding is a CurrentPhase of type building.
	CurrentPhaseBuilding CurrentPhase = "building"
	// CurrentPhaseRunning is a CurrentPhase of type running.
	CurrentPhaseRunning CurrentPhase = "running"
	// CurrentPhaseBuildComplete is a CurrentPhase of type buildComplete.
	CurrentPhaseBuildComplete CurrentPhase = "buildComplete"
	// CurrentPhaseRunCompleted is a CurrentPhase of type runCompleted.
	CurrentPhaseRunCompleted CurrentPhase = "runCompleted"
	// CurrentPhaseFailed is a CurrentPhase of type failed.
	CurrentPhaseFailed CurrentPhase = "failed"
)

var ErrInvalidCurrentPhase = errors.New("not a valid CurrentPhase")

// String implements the Stringer interface.
func (x CurrentPhase) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CurrentPhase) IsValid() bool {
	_, err := ParseCurrentPhase(string(x))
	return err == nil
}

var _CurrentPhaseValue = map[string]CurrentPhase{
	"pending":       CurrentPhasePending,
	"building":      CurrentPhaseBuilding,
	"running":       CurrentPhaseRunning,
	"buildComplete": CurrentPhaseBuildComplete,
	"runCompleted":  CurrentPhaseRunCompleted,
	"failed":        CurrentPhaseFailed,
}

// ParseCurrentPhase attempts to convert a string to a CurrentPhase.
func ParseCurrentPhase(name string) (CurrentPhase, error) {
	if x, ok := _CurrentPhaseValue[name]; ok {
		return x, nil
	}
	return CurrentPhase(""), fmt.Errorf("%s is %w", name, ErrInvalidCurrentPhase)
}

func (x CurrentPhase) Ptr() *CurrentPhase {
	return &x
}

// MarshalText implements the text marshaller method.
func (x CurrentPhase) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *CurrentPhase) UnmarshalText(text []byte) error {
	tmp, err := ParseCurrentPhase(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
